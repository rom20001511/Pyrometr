
Course_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e0  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002694  08002694  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002694  08002694  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002694  08002694  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800269c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000008  080026a4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080026a4  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034f8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c40  00000000  00000000  00023530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00024170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000200  00000000  00000000  00024408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c89  00000000  00000000  00024608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c5b  00000000  00000000  0003d291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d29  00000000  00000000  00040eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c9c15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009ac  00000000  00000000  000c9c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000008 	.word	0x20000008
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08002370 	.word	0x08002370

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	08002370 	.word	0x08002370

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4907      	ldr	r1, [pc, #28]	; (8000b90 <__NVIC_EnableIRQ+0x38>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <GPIOA_Button_init>:

float emissivity = 0.99;						// the radiation coefficient of the material


void GPIOA_Button_init() /* Button is located on PA0 pin */
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	TIM6_OPM_init();
 8000bec:	f000 f88a 	bl	8000d04 <TIM6_OPM_init>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <GPIOA_Button_init+0xac>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <GPIOA_Button_init+0xac>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~GPIO_MODER_MODER0;
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <GPIOA_Button_init+0xb0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <GPIOA_Button_init+0xb0>)
 8000c02:	f023 0303 	bic.w	r3, r3, #3
 8000c06:	6013      	str	r3, [r2, #0]
	EXTI->IMR|= EXTI_IMR_IM0;
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6013      	str	r3, [r2, #0]
	EXTI->EMR|= EXTI_EMR_EM0;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	4a20      	ldr	r2, [pc, #128]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6053      	str	r3, [r2, #4]
	EXTI->RTSR|= EXTI_RTSR_TR0;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6093      	str	r3, [r2, #8]
	GPIOA->MODER &= ~GPIO_MODER_MODER1;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <GPIOA_Button_init+0xb0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <GPIOA_Button_init+0xb0>)
 8000c32:	f023 030c 	bic.w	r3, r3, #12
 8000c36:	6013      	str	r3, [r2, #0]
	EXTI->IMR|= EXTI_IMR_IM1;
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	6013      	str	r3, [r2, #0]
	EXTI->EMR|= EXTI_EMR_EM1;
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	6053      	str	r3, [r2, #4]
	EXTI->RTSR|= EXTI_RTSR_TR1;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <GPIOA_Button_init+0xb4>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] &= ~0xF;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <GPIOA_Button_init+0xb8>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <GPIOA_Button_init+0xb8>)
 8000c62:	f023 030f 	bic.w	r3, r3, #15
 8000c66:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] &= ~(0xF << 4);
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <GPIOA_Button_init+0xb8>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <GPIOA_Button_init+0xb8>)
 8000c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c72:	6093      	str	r3, [r2, #8]
	NVIC_SetPriority(EXTI0_IRQn, 3);
 8000c74:	2103      	movs	r1, #3
 8000c76:	2006      	movs	r0, #6
 8000c78:	f7ff ff8c 	bl	8000b94 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000c7c:	2006      	movs	r0, #6
 8000c7e:	f7ff ff6b 	bl	8000b58 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI1_IRQn, 3);
 8000c82:	2103      	movs	r1, #3
 8000c84:	2007      	movs	r0, #7
 8000c86:	f7ff ff85 	bl	8000b94 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI1_IRQn);
 8000c8a:	2007      	movs	r0, #7
 8000c8c:	f7ff ff64 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40013c00 	.word	0x40013c00
 8000ca0:	40013800 	.word	0x40013800

08000ca4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR0;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <EXTI0_IRQHandler+0x28>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <EXTI0_IRQHandler+0x28>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_CEN; //Starting the timer
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <EXTI0_IRQHandler+0x2c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <EXTI0_IRQHandler+0x2c>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40013c00 	.word	0x40013c00
 8000cd0:	40001000 	.word	0x40001000

08000cd4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR1;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <EXTI1_IRQHandler+0x28>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <EXTI1_IRQHandler+0x28>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	6153      	str	r3, [r2, #20]
	TIM6->CR1 |= TIM_CR1_CEN; //Starting the timer
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <EXTI1_IRQHandler+0x2c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <EXTI1_IRQHandler+0x2c>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40013c00 	.word	0x40013c00
 8000d00:	40001000 	.word	0x40001000

08000d04 <TIM6_OPM_init>:

void TIM6_OPM_init()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <TIM6_OPM_init+0x58>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <TIM6_OPM_init+0x58>)
 8000d0e:	f043 0310 	orr.w	r3, r3, #16
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
	TIM6->CR1 |= TIM_CR1_ARPE;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <TIM6_OPM_init+0x5c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <TIM6_OPM_init+0x5c>)
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1e:	6013      	str	r3, [r2, #0]
	TIM6->CR1 |= TIM_CR1_OPM; // One pulse mode
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <TIM6_OPM_init+0x5c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <TIM6_OPM_init+0x5c>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6013      	str	r3, [r2, #0]
	TIM6->PSC = 2400-1; // 100ms delay
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <TIM6_OPM_init+0x5c>)
 8000d2e:	f640 125f 	movw	r2, #2399	; 0x95f
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 2000-1; // Processing an interrupt once per second
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <TIM6_OPM_init+0x5c>)
 8000d36:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->DIER |= TIM_DIER_UIE; //Timer Interrupt Resolution
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <TIM6_OPM_init+0x5c>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <TIM6_OPM_init+0x5c>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM6_DAC_IRQn, 7);
 8000d48:	2107      	movs	r1, #7
 8000d4a:	2036      	movs	r0, #54	; 0x36
 8000d4c:	f7ff ff22 	bl	8000b94 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d50:	2036      	movs	r0, #54	; 0x36
 8000d52:	f7ff ff01 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40001000 	.word	0x40001000
 8000d64:	00000000 	.word	0x00000000

08000d68 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	TIM6->SR &= ~0x1;
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <TIM6_DAC_IRQHandler+0xc8>)
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	4a2f      	ldr	r2, [pc, #188]	; (8000e30 <TIM6_DAC_IRQHandler+0xc8>)
 8000d72:	f023 0301 	bic.w	r3, r3, #1
 8000d76:	6113      	str	r3, [r2, #16]
	if (GPIOA ->IDR & 0x1)
 8000d78:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <TIM6_DAC_IRQHandler+0xcc>)
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d01f      	beq.n	8000dc4 <TIM6_DAC_IRQHandler+0x5c>
	{
		emissivity+=0.01;
 8000d84:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <TIM6_DAC_IRQHandler+0xd0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fb91 	bl	80004b0 <__aeabi_f2d>
 8000d8e:	a326      	add	r3, pc, #152	; (adr r3, 8000e28 <TIM6_DAC_IRQHandler+0xc0>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f7ff fa2e 	bl	80001f4 <__adddf3>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f7ff fe78 	bl	8000a94 <__aeabi_d2f>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4a24      	ldr	r2, [pc, #144]	; (8000e38 <TIM6_DAC_IRQHandler+0xd0>)
 8000da8:	6013      	str	r3, [r2, #0]
		if (emissivity>=1){
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <TIM6_DAC_IRQHandler+0xd0>)
 8000dac:	edd3 7a00 	vldr	s15, [r3]
 8000db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbc:	db02      	blt.n	8000dc4 <TIM6_DAC_IRQHandler+0x5c>
			emissivity=0.01;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <TIM6_DAC_IRQHandler+0xd0>)
 8000dc0:	4a1e      	ldr	r2, [pc, #120]	; (8000e3c <TIM6_DAC_IRQHandler+0xd4>)
 8000dc2:	601a      	str	r2, [r3, #0]
		}
	}
	if (GPIOA ->IDR & 0x2)
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <TIM6_DAC_IRQHandler+0xcc>)
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d022      	beq.n	8000e16 <TIM6_DAC_IRQHandler+0xae>
	{
		emissivity-=0.01;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <TIM6_DAC_IRQHandler+0xd0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb6b 	bl	80004b0 <__aeabi_f2d>
 8000dda:	a313      	add	r3, pc, #76	; (adr r3, 8000e28 <TIM6_DAC_IRQHandler+0xc0>)
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	f7ff fa06 	bl	80001f0 <__aeabi_dsub>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	4610      	mov	r0, r2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f7ff fe52 	bl	8000a94 <__aeabi_d2f>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <TIM6_DAC_IRQHandler+0xd0>)
 8000df4:	6013      	str	r3, [r2, #0]
		if (emissivity<=0.01){
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <TIM6_DAC_IRQHandler+0xd0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fb58 	bl	80004b0 <__aeabi_f2d>
 8000e00:	a309      	add	r3, pc, #36	; (adr r3, 8000e28 <TIM6_DAC_IRQHandler+0xc0>)
 8000e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e06:	f7ff fe27 	bl	8000a58 <__aeabi_dcmple>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <TIM6_DAC_IRQHandler+0xae>
			emissivity=0.99;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <TIM6_DAC_IRQHandler+0xd0>)
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <TIM6_DAC_IRQHandler+0xd8>)
 8000e14:	601a      	str	r2, [r3, #0]
		}
	}
	FloatToCharEmissivity(emissivity);
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <TIM6_DAC_IRQHandler+0xd0>)
 8000e18:	edd3 7a00 	vldr	s15, [r3]
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	f000 fe9e 	bl	8001b60 <FloatToCharEmissivity>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	47ae147b 	.word	0x47ae147b
 8000e2c:	3f847ae1 	.word	0x3f847ae1
 8000e30:	40001000 	.word	0x40001000
 8000e34:	40020000 	.word	0x40020000
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	3c23d70a 	.word	0x3c23d70a
 8000e40:	3f7d70a4 	.word	0x3f7d70a4

08000e44 <InitGPIO_RCC>:
#define SET_IN()	(CurrGPIO->MODER &= ~(1 << curr_pin*2))
#define OUT_1()	(CurrGPIO->BSRR = 1 << curr_pin)
#define OUT_0()	(CurrGPIO->BSRR = 1 << (curr_pin + 16))


static void InitGPIO_RCC(GPIO_TypeDef *GPIO) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <InitGPIO_RCC+0x6c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d106      	bne.n	8000e62 <InitGPIO_RCC+0x1e>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <InitGPIO_RCC+0x70>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <InitGPIO_RCC+0x70>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
	}
	else if (GPIO == GPIOD) {
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
	}
}
 8000e60:	e01f      	b.n	8000ea2 <InitGPIO_RCC+0x5e>
	else if (GPIO == GPIOB) {
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <InitGPIO_RCC+0x74>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d106      	bne.n	8000e78 <InitGPIO_RCC+0x34>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <InitGPIO_RCC+0x70>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <InitGPIO_RCC+0x70>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e76:	e014      	b.n	8000ea2 <InitGPIO_RCC+0x5e>
	else if (GPIO == GPIOC) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <InitGPIO_RCC+0x78>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <InitGPIO_RCC+0x4a>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <InitGPIO_RCC+0x70>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <InitGPIO_RCC+0x70>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e8c:	e009      	b.n	8000ea2 <InitGPIO_RCC+0x5e>
	else if (GPIO == GPIOD) {
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <InitGPIO_RCC+0x7c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d105      	bne.n	8000ea2 <InitGPIO_RCC+0x5e>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <InitGPIO_RCC+0x70>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <InitGPIO_RCC+0x70>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <Init_Clock>:

void Init_Clock(){
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	FLASH->ACR |= FLASH_ACR_LATENCY_1WS; // 1 wait state for 48 MHz
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <Init_Clock+0xcc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <Init_Clock+0xcc>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON; // Activate external clock (HSE: 8 MHz)
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <Init_Clock+0xd0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a2e      	ldr	r2, [pc, #184]	; (8000f94 <Init_Clock+0xd0>)
 8000eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0); // Wait until HSE is ready
 8000ee0:	bf00      	nop
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <Init_Clock+0xd0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f9      	beq.n	8000ee2 <Init_Clock+0x1e>
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;
 8000eee:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <Init_Clock+0xd0>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4a28      	ldr	r2, [pc, #160]	; (8000f94 <Init_Clock+0xd0>)
 8000ef4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000ef8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 4 << RCC_PLLCFGR_PLLQ_Pos; // PLL-Q: /4
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <Init_Clock+0xd0>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <Init_Clock+0xd0>)
 8000f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f04:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE; // PLL source is HSE
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <Init_Clock+0xd0>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <Init_Clock+0xd0>)
 8000f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f10:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; // PLL-P: /2
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <Init_Clock+0xd0>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <Init_Clock+0xd0>)
 8000f18:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000f1c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <Init_Clock+0xd0>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <Init_Clock+0xd0>)
 8000f24:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f2c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 96 << RCC_PLLCFGR_PLLN_Pos; // PLL-N: x96
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <Init_Clock+0xd0>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <Init_Clock+0xd0>)
 8000f34:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000f38:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <Init_Clock+0xd0>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <Init_Clock+0xd0>)
 8000f40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f44:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 4 << RCC_PLLCFGR_PLLM_Pos; // PLL-M: /4
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <Init_Clock+0xd0>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <Init_Clock+0xd0>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON; // Activate the PLL (Output: 96 MHz)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <Init_Clock+0xd0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <Init_Clock+0xd0>)
 8000f58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f5c:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY) == 0); // Wait until PLL is ready
 8000f5e:	bf00      	nop
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <Init_Clock+0xd0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f9      	beq.n	8000f60 <Init_Clock+0x9c>
	RCC->CFGR |= RCC_CFGR_HPRE_DIV2; // AHB divider: /2 (48 MHz)
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <Init_Clock+0xd0>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <Init_Clock+0xd0>)
 8000f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f76:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // Switching to PLL clock source
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <Init_Clock+0xd0>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <Init_Clock+0xd0>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	6093      	str	r3, [r2, #8]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00
 8000f94:	40023800 	.word	0x40023800

08000f98 <Delay_tick>:

void Delay_tick(uint16_t tick) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	for (uint32_t i = 0; i < tick; i++);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e002      	b.n	8000fae <Delay_tick+0x16>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3f8      	bcc.n	8000fa8 <Delay_tick+0x10>
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <reset_ds18>:

static uint8_t reset_ds18() {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	SET_OUT();	//write
 8000fc8:	4b33      	ldr	r3, [pc, #204]	; (8001098 <reset_ds18+0xd4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <reset_ds18+0xd8>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <reset_ds18+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]
	OUT_0();
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <reset_ds18+0xd8>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	3310      	adds	r3, #16
 8000fea:	2201      	movs	r2, #1
 8000fec:	409a      	lsls	r2, r3
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <reset_ds18+0xd4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	619a      	str	r2, [r3, #24]
	Delay_tick(1700);	// > 500 uS
 8000ff4:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8000ff8:	f7ff ffce 	bl	8000f98 <Delay_tick>
	SET_IN();	//read...
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <reset_ds18+0xd4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <reset_ds18+0xd8>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	4619      	mov	r1, r3
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <reset_ds18+0xd4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	400a      	ands	r2, r1
 8001018:	601a      	str	r2, [r3, #0]
	Delay_tick(300);	//88 uS
 800101a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800101e:	f7ff ffbb 	bl	8000f98 <Delay_tick>
	if ((CurrGPIO->IDR & (1 << curr_pin))) {
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <reset_ds18+0xd4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <reset_ds18+0xd8>)
 800102a:	8812      	ldrh	r2, [r2, #0]
 800102c:	4611      	mov	r1, r2
 800102e:	2201      	movs	r2, #1
 8001030:	408a      	lsls	r2, r1
 8001032:	4013      	ands	r3, r2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d018      	beq.n	800106a <reset_ds18+0xa6>
		SET_OUT();
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <reset_ds18+0xd4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <reset_ds18+0xd8>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	4619      	mov	r1, r3
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <reset_ds18+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
		OUT_1();
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <reset_ds18+0xd8>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	2301      	movs	r3, #1
 800105c:	fa03 f202 	lsl.w	r2, r3, r2
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <reset_ds18+0xd4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	619a      	str	r2, [r3, #24]
		return DS18B20_ERR_NO_SENSOR;
 8001066:	2301      	movs	r3, #1
 8001068:	e013      	b.n	8001092 <reset_ds18+0xce>
	}
	Delay_tick(1030);	//300 uS
 800106a:	f240 4006 	movw	r0, #1030	; 0x406
 800106e:	f7ff ff93 	bl	8000f98 <Delay_tick>

	SET_IN();
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <reset_ds18+0xd4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <reset_ds18+0xd8>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <reset_ds18+0xd4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	400a      	ands	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
	return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000028 	.word	0x20000028
 800109c:	20000034 	.word	0x20000034

080010a0 <write_ds18>:

static void write_ds18(uint32_t data, uint8_t num_bit) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
	SET_OUT();
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <write_ds18+0xbc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <write_ds18+0xc0>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2101      	movs	r1, #1
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	4619      	mov	r1, r3
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <write_ds18+0xbc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

	for (uint8_t i = 0; i < num_bit; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e02f      	b.n	800112e <write_ds18+0x8e>
	{
		OUT_0();
 80010ce:	4b24      	ldr	r3, [pc, #144]	; (8001160 <write_ds18+0xc0>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	3310      	adds	r3, #16
 80010d4:	2201      	movs	r2, #1
 80010d6:	409a      	lsls	r2, r3
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <write_ds18+0xbc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	619a      	str	r2, [r3, #24]
		Delay_tick(1);	//approx 1 uS
 80010de:	2001      	movs	r0, #1
 80010e0:	f7ff ff5a 	bl	8000f98 <Delay_tick>

		if ((data & (1 << i))) {
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2201      	movs	r2, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	461a      	mov	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <write_ds18+0x68>
			OUT_1();
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <write_ds18+0xc0>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	2301      	movs	r3, #1
 80010fe:	fa03 f202 	lsl.w	r2, r3, r2
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <write_ds18+0xbc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	619a      	str	r2, [r3, #24]
		}
		Delay_tick(300);	//88uS
 8001108:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800110c:	f7ff ff44 	bl	8000f98 <Delay_tick>

		OUT_1();
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <write_ds18+0xc0>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	2301      	movs	r3, #1
 8001118:	fa03 f202 	lsl.w	r2, r3, r2
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <write_ds18+0xbc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	619a      	str	r2, [r3, #24]
		Delay_tick(4);
 8001122:	2004      	movs	r0, #4
 8001124:	f7ff ff38 	bl	8000f98 <Delay_tick>
	for (uint8_t i = 0; i < num_bit; i++)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	3301      	adds	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	429a      	cmp	r2, r3
 8001134:	d3cb      	bcc.n	80010ce <write_ds18+0x2e>
	}
	SET_IN();
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <write_ds18+0xbc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <write_ds18+0xc0>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <write_ds18+0xbc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	400a      	ands	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000028 	.word	0x20000028
 8001160:	20000034 	.word	0x20000034

08001164 <read_ds18>:

static uint32_t read_ds18(uint8_t count_bit) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	uint32_t data = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < count_bit; i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	72fb      	strb	r3, [r7, #11]
 8001176:	e043      	b.n	8001200 <read_ds18+0x9c>
		SET_OUT();
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <read_ds18+0xcc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <read_ds18+0xd0>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	4619      	mov	r1, r3
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <read_ds18+0xcc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]
		OUT_0();
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <read_ds18+0xd0>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	3310      	adds	r3, #16
 800119a:	2201      	movs	r2, #1
 800119c:	409a      	lsls	r2, r3
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <read_ds18+0xcc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	619a      	str	r2, [r3, #24]
		Delay_tick(10);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f7ff fef7 	bl	8000f98 <Delay_tick>
		SET_IN();
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <read_ds18+0xcc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <read_ds18+0xd0>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2101      	movs	r1, #1
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	4619      	mov	r1, r3
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <read_ds18+0xcc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	400a      	ands	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]
		Delay_tick(10);	//
 80011c8:	200a      	movs	r0, #10
 80011ca:	f7ff fee5 	bl	8000f98 <Delay_tick>
		data |= ((CurrGPIO->IDR & (1 << curr_pin)) >> curr_pin) << i;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <read_ds18+0xcc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <read_ds18+0xd0>)
 80011d6:	8812      	ldrh	r2, [r2, #0]
 80011d8:	4611      	mov	r1, r2
 80011da:	2201      	movs	r2, #1
 80011dc:	408a      	lsls	r2, r1
 80011de:	4013      	ands	r3, r2
 80011e0:	4a14      	ldr	r2, [pc, #80]	; (8001234 <read_ds18+0xd0>)
 80011e2:	8812      	ldrh	r2, [r2, #0]
 80011e4:	fa23 f202 	lsr.w	r2, r3, r2
 80011e8:	7afb      	ldrb	r3, [r7, #11]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
		Delay_tick(150);
 80011f4:	2096      	movs	r0, #150	; 0x96
 80011f6:	f7ff fecf 	bl	8000f98 <Delay_tick>
	for (uint8_t i = 0; i < count_bit; i++) {
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3301      	adds	r3, #1
 80011fe:	72fb      	strb	r3, [r7, #11]
 8001200:	7afa      	ldrb	r2, [r7, #11]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3b7      	bcc.n	8001178 <read_ds18+0x14>
	}

	SET_IN();
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <read_ds18+0xcc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <read_ds18+0xd0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2101      	movs	r1, #1
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <read_ds18+0xcc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	400a      	ands	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
	return data;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000028 	.word	0x20000028
 8001234:	20000034 	.word	0x20000034

08001238 <ds18b20_Init>:

void ds18b20_Init(GPIO_TypeDef *GPIO, uint16_t num_pin) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]

	InitGPIO_RCC(GPIO);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fdfd 	bl	8000e44 <InitGPIO_RCC>
	CurrGPIO = GPIO;
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <ds18b20_Init+0x4c>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
	curr_pin = num_pin;
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <ds18b20_Init+0x50>)
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	8013      	strh	r3, [r2, #0]

	SET_OUT();
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <ds18b20_Init+0x4c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <ds18b20_Init+0x50>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	4619      	mov	r1, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <ds18b20_Init+0x4c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	601a      	str	r2, [r3, #0]
	reset_ds18();
 8001272:	f7ff fea7 	bl	8000fc4 <reset_ds18>
	ds18b20_SkipRom();
 8001276:	f000 f834 	bl	80012e2 <ds18b20_SkipRom>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000028 	.word	0x20000028
 8001288:	20000034 	.word	0x20000034

0800128c <ds18b20_GetTemperature>:

uint32_t ds18b20_GetTemperature(){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	uint32_t temperature = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]

	reset_ds18();
 8001296:	f7ff fe95 	bl	8000fc4 <reset_ds18>

	ds18b20_SkipRom();	//0xCC
 800129a:	f000 f822 	bl	80012e2 <ds18b20_SkipRom>

	Delay_tick(30);	//10uS
 800129e:	201e      	movs	r0, #30
 80012a0:	f7ff fe7a 	bl	8000f98 <Delay_tick>

	write_ds18(0xBE, 8);	//read scratchpad
 80012a4:	2108      	movs	r1, #8
 80012a6:	20be      	movs	r0, #190	; 0xbe
 80012a8:	f7ff fefa 	bl	80010a0 <write_ds18>
	Delay_tick(2);	//2uS
 80012ac:	2002      	movs	r0, #2
 80012ae:	f7ff fe73 	bl	8000f98 <Delay_tick>
	temperature = read_ds18(16);	//read data from device....
 80012b2:	2010      	movs	r0, #16
 80012b4:	f7ff ff56 	bl	8001164 <read_ds18>
 80012b8:	6078      	str	r0, [r7, #4]
	return temperature;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <ds18b20_StartMeas>:

void ds18b20_StartMeas() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	reset_ds18();
 80012c8:	f7ff fe7c 	bl	8000fc4 <reset_ds18>

	ds18b20_SkipRom();
 80012cc:	f000 f809 	bl	80012e2 <ds18b20_SkipRom>
	Delay_tick(30);	//10 uS
 80012d0:	201e      	movs	r0, #30
 80012d2:	f7ff fe61 	bl	8000f98 <Delay_tick>

	write_ds18(0x44, 8);	//convert_T init single temperature conversion
 80012d6:	2108      	movs	r1, #8
 80012d8:	2044      	movs	r0, #68	; 0x44
 80012da:	f7ff fee1 	bl	80010a0 <write_ds18>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <ds18b20_SkipRom>:

void ds18b20_SkipRom() {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
	write_ds18(0xCC, 8);
 80012e6:	2108      	movs	r1, #8
 80012e8:	20cc      	movs	r0, #204	; 0xcc
 80012ea:	f7ff fed9 	bl	80010a0 <write_ds18>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <ds18b20_RealTemp>:

void ds18b20_RealTemp(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	ds18b20_Init(GPIOB, 8);
 80012fa:	2108      	movs	r1, #8
 80012fc:	4819      	ldr	r0, [pc, #100]	; (8001364 <ds18b20_RealTemp+0x70>)
 80012fe:	f7ff ff9b 	bl	8001238 <ds18b20_Init>
	uint32_t temperature = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
	ds18b20_StartMeas();
 8001306:	f7ff ffdd 	bl	80012c4 <ds18b20_StartMeas>
	for (int i = 0; i < 1000; i++) {
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	e006      	b.n	800131e <ds18b20_RealTemp+0x2a>
		Delay_tick(3400);
 8001310:	f640 5048 	movw	r0, #3400	; 0xd48
 8001314:	f7ff fe40 	bl	8000f98 <Delay_tick>
	for (int i = 0; i < 1000; i++) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3301      	adds	r3, #1
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001324:	dbf4      	blt.n	8001310 <ds18b20_RealTemp+0x1c>
	}
	temperature = ds18b20_GetTemperature();
 8001326:	f7ff ffb1 	bl	800128c <ds18b20_GetTemperature>
 800132a:	6038      	str	r0, [r7, #0]
	real_temp = (temperature & 0xFFF) * 0.0625;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f89a 	bl	800046c <__aeabi_ui2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <ds18b20_RealTemp+0x74>)
 800133e:	f7ff f90f 	bl	8000560 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fba3 	bl	8000a94 <__aeabi_d2f>
 800134e:	4603      	mov	r3, r0
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <ds18b20_RealTemp+0x78>)
 8001352:	6013      	str	r3, [r2, #0]
	Delay_tick(100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f7ff fe1f 	bl	8000f98 <Delay_tick>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40020400 	.word	0x40020400
 8001368:	3fb00000 	.word	0x3fb00000
 800136c:	20000024 	.word	0x20000024

08001370 <I2C2_Init>:
#include "i2c.h"

void I2C2_Init(void){
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
			SCL -> PB10
			SDA -> PB11
	*/

    //enabling the clocking of ports and the I2C module
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <I2C2_Init+0xf8>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a3b      	ldr	r2, [pc, #236]	; (8001468 <I2C2_Init+0xf8>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |=	RCC_APB1ENR_I2C2EN;
 8001380:	4b39      	ldr	r3, [pc, #228]	; (8001468 <I2C2_Init+0xf8>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a38      	ldr	r2, [pc, #224]	; (8001468 <I2C2_Init+0xf8>)
 8001386:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800138a:	6413      	str	r3, [r2, #64]	; 0x40

	//alternative function, open drain output, 50 MHz
	GPIOB->AFR[1] |= (0x04<<2*4);
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <I2C2_Init+0xfc>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	4a36      	ldr	r2, [pc, #216]	; (800146c <I2C2_Init+0xfc>)
 8001392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001396:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (0x04<<3*4);
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <I2C2_Init+0xfc>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	4a33      	ldr	r2, [pc, #204]	; (800146c <I2C2_Init+0xfc>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a2:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->MODER |= GPIO_MODER_MODER10_1;
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <I2C2_Init+0xfc>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a30      	ldr	r2, [pc, #192]	; (800146c <I2C2_Init+0xfc>)
 80013aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ae:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT_10;
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <I2C2_Init+0xfc>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a2d      	ldr	r2, [pc, #180]	; (800146c <I2C2_Init+0xfc>)
 80013b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ba:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10;
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <I2C2_Init+0xfc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4a2a      	ldr	r2, [pc, #168]	; (800146c <I2C2_Init+0xfc>)
 80013c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80013c6:	6093      	str	r3, [r2, #8]

	GPIOB->MODER |= GPIO_MODER_MODER11_1;
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <I2C2_Init+0xfc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <I2C2_Init+0xfc>)
 80013ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013d2:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT_11;
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <I2C2_Init+0xfc>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a24      	ldr	r2, [pc, #144]	; (800146c <I2C2_Init+0xfc>)
 80013da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013de:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR11;
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <I2C2_Init+0xfc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4a21      	ldr	r2, [pc, #132]	; (800146c <I2C2_Init+0xfc>)
 80013e6:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80013ea:	6093      	str	r3, [r2, #8]

	//setting up the module in I2C mode
	I2C2->CR1 &= ~I2C_CR1_SMBUS;
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <I2C2_Init+0x100>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <I2C2_Init+0x100>)
 80013f2:	f023 0302 	bic.w	r3, r3, #2
 80013f6:	6013      	str	r3, [r2, #0]

    //specify the clock frequency of the module
	I2C2->CR2 &= ~I2C_CR2_FREQ;					// throw off the bits of the clock bus frequency APB1
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <I2C2_Init+0x100>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <I2C2_Init+0x100>)
 80013fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001402:	6053      	str	r3, [r2, #4]
	I2C2->CR2 |= F_APB1;  						// set the frequency of the APB1 bus from which the I2C module is clocked
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <I2C2_Init+0x100>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a19      	ldr	r2, [pc, #100]	; (8001470 <I2C2_Init+0x100>)
 800140a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800140e:	6053      	str	r3, [r2, #4]

	I2C2->CR1 &= ~I2C_CR1_PE; 					// turn off the I2C module to configure the CCR register
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <I2C2_Init+0x100>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a16      	ldr	r2, [pc, #88]	; (8001470 <I2C2_Init+0x100>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]

	I2C2->CCR &= ~(I2C_CCR_FS | I2C_CCR_DUTY);	//configuring I2C, standart mode, 100 KHz duty cycle 1/2
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <I2C2_Init+0x100>)
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	4a13      	ldr	r2, [pc, #76]	; (8001470 <I2C2_Init+0x100>)
 8001422:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001426:	61d3      	str	r3, [r2, #28]
	I2C2->CCR |= CCR_VALUE;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <I2C2_Init+0x100>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <I2C2_Init+0x100>)
 800142e:	f043 03b9 	orr.w	r3, r3, #185	; 0xb9
 8001432:	61d3      	str	r3, [r2, #28]
	I2C2->TRISE = TRISE_VALUE;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <I2C2_Init+0x100>)
 8001436:	2225      	movs	r2, #37	; 0x25
 8001438:	621a      	str	r2, [r3, #32]

	I2C2->CR1 |= I2C_CR1_ENPEC; 				// allow sending PEC
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <I2C2_Init+0x100>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <I2C2_Init+0x100>)
 8001440:	f043 0320 	orr.w	r3, r3, #32
 8001444:	6013      	str	r3, [r2, #0]
	I2C2->CR1 |= I2C_CR1_PE;					// turning on the I2C module
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <I2C2_Init+0x100>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <I2C2_Init+0x100>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6013      	str	r3, [r2, #0]
	I2C2->CR1 |= I2C_CR1_ACK; 					// allowing ACK
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <I2C2_Init+0x100>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a06      	ldr	r2, [pc, #24]	; (8001470 <I2C2_Init+0x100>)
 8001458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800145c:	6013      	str	r3, [r2, #0]
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400
 8001470:	40005800 	.word	0x40005800

08001474 <Draw_Simbol>:
			}
		}
	}
}

void Draw_Simbol(uint16_t x, uint16_t y, uint16_t color, uint16_t phone, uint8_t ascii,  uint8_t size){
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b087      	sub	sp, #28
 8001478:	af02      	add	r7, sp, #8
 800147a:	4604      	mov	r4, r0
 800147c:	4608      	mov	r0, r1
 800147e:	4611      	mov	r1, r2
 8001480:	461a      	mov	r2, r3
 8001482:	4623      	mov	r3, r4
 8001484:	80fb      	strh	r3, [r7, #6]
 8001486:	4603      	mov	r3, r0
 8001488:	80bb      	strh	r3, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]
 800148e:	4613      	mov	r3, r2
 8001490:	803b      	strh	r3, [r7, #0]
	for (int i = 0; i <FONT_Y; i++ )
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	e090      	b.n	80015ba <Draw_Simbol+0x146>
	{
		for(uint8_t f = 0; f < FONT_X; f++)
 8001498:	2300      	movs	r3, #0
 800149a:	72fb      	strb	r3, [r7, #11]
 800149c:	e086      	b.n	80015ac <Draw_Simbol+0x138>
		{
			if(((simbols[ascii-0x20][i])>>(7-f))&0x01){
 800149e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014a2:	3b20      	subs	r3, #32
 80014a4:	4a49      	ldr	r2, [pc, #292]	; (80015cc <Draw_Simbol+0x158>)
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	441a      	add	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	f1c3 0307 	rsb	r3, r3, #7
 80014b8:	fa42 f303 	asr.w	r3, r2, r3
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d038      	beq.n	8001536 <Draw_Simbol+0xc2>
				tft_color_XY(x+f*size, y+i*size, x+(f+1)*size -1, y+(i+1)*size -1, color);
 80014c4:	7afb      	ldrb	r3, [r7, #11]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	fb12 f303 	smulbb	r3, r2, r3
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4413      	add	r3, r2
 80014d8:	b298      	uxth	r0, r3
 80014da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	fb12 f303 	smulbb	r3, r2, r3
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	b299      	uxth	r1, r3
 80014f0:	7afb      	ldrb	r3, [r7, #11]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	fb12 f303 	smulbb	r3, r2, r3
 8001500:	b29a      	uxth	r2, r3
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4413      	add	r3, r2
 8001506:	b29b      	uxth	r3, r3
 8001508:	3b01      	subs	r3, #1
 800150a:	b29c      	uxth	r4, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3301      	adds	r3, #1
 8001510:	b29a      	uxth	r2, r3
 8001512:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001516:	b29b      	uxth	r3, r3
 8001518:	fb12 f303 	smulbb	r3, r2, r3
 800151c:	b29a      	uxth	r2, r3
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	b29b      	uxth	r3, r3
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	4613      	mov	r3, r2
 800152e:	4622      	mov	r2, r4
 8001530:	f000 fe4e 	bl	80021d0 <tft_color_XY>
 8001534:	e037      	b.n	80015a6 <Draw_Simbol+0x132>
			}
			else
				tft_color_XY(x+f*size, y+i*size, x+(f+1)*size -1, y+(i+1)*size -1, phone);
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	b29a      	uxth	r2, r3
 800153a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800153e:	b29b      	uxth	r3, r3
 8001540:	fb12 f303 	smulbb	r3, r2, r3
 8001544:	b29a      	uxth	r2, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	4413      	add	r3, r2
 800154a:	b298      	uxth	r0, r3
 800154c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	b29b      	uxth	r3, r3
 8001556:	fb12 f303 	smulbb	r3, r2, r3
 800155a:	b29a      	uxth	r2, r3
 800155c:	88bb      	ldrh	r3, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	b299      	uxth	r1, r3
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	3301      	adds	r3, #1
 8001566:	b29a      	uxth	r2, r3
 8001568:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800156c:	b29b      	uxth	r3, r3
 800156e:	fb12 f303 	smulbb	r3, r2, r3
 8001572:	b29a      	uxth	r2, r3
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4413      	add	r3, r2
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	b29c      	uxth	r4, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	3301      	adds	r3, #1
 8001582:	b29a      	uxth	r2, r3
 8001584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001588:	b29b      	uxth	r3, r3
 800158a:	fb12 f303 	smulbb	r3, r2, r3
 800158e:	b29a      	uxth	r2, r3
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	3b01      	subs	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	883b      	ldrh	r3, [r7, #0]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4613      	mov	r3, r2
 80015a0:	4622      	mov	r2, r4
 80015a2:	f000 fe15 	bl	80021d0 <tft_color_XY>
		for(uint8_t f = 0; f < FONT_X; f++)
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	3301      	adds	r3, #1
 80015aa:	72fb      	strb	r3, [r7, #11]
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	f67f af75 	bls.w	800149e <Draw_Simbol+0x2a>
	for (int i = 0; i <FONT_Y; i++ )
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3301      	adds	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	f77f af6b 	ble.w	8001498 <Draw_Simbol+0x24>
		}
	}
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	080023a4 	.word	0x080023a4

080015d0 <Draw_String>:

void Draw_String(uint16_t x, uint16_t y, uint16_t color, uint16_t phone,char *string,  uint8_t size)
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	4604      	mov	r4, r0
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4623      	mov	r3, r4
 80015e0:	80fb      	strh	r3, [r7, #6]
 80015e2:	4603      	mov	r3, r0
 80015e4:	80bb      	strh	r3, [r7, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	807b      	strh	r3, [r7, #2]
 80015ea:	4613      	mov	r3, r2
 80015ec:	803b      	strh	r3, [r7, #0]
	int i=0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
	while(string[i]!=0)
 80015f2:	e028      	b.n	8001646 <Draw_String+0x76>
	{
		if((x + FONT_X) > X_SIZE)
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80015fa:	d909      	bls.n	8001610 <Draw_String+0x40>
		{
			x = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	80fb      	strh	r3, [r7, #6]
			y = y + FONT_Y*size;
 8001600:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001604:	b29b      	uxth	r3, r3
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	b29a      	uxth	r2, r3
 800160a:	88bb      	ldrh	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	80bb      	strh	r3, [r7, #4]
		}
		Draw_Simbol(x, y, color, phone, string[i], size);//drawing the symbol
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a3a      	ldr	r2, [r7, #32]
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	883d      	ldrh	r5, [r7, #0]
 800161a:	887c      	ldrh	r4, [r7, #2]
 800161c:	88b9      	ldrh	r1, [r7, #4]
 800161e:	88f8      	ldrh	r0, [r7, #6]
 8001620:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001624:	9201      	str	r2, [sp, #4]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	462b      	mov	r3, r5
 800162a:	4622      	mov	r2, r4
 800162c:	f7ff ff22 	bl	8001474 <Draw_Simbol>
		x += size*FONT_X;	//changing the coordinate to draw the next character
 8001630:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001634:	b29b      	uxth	r3, r3
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	b29a      	uxth	r2, r3
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	4413      	add	r3, r2
 800163e:	80fb      	strh	r3, [r7, #6]
		i++;				//increase the value of the pointer so that it references the next character
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3301      	adds	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
	while(string[i]!=0)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6a3a      	ldr	r2, [r7, #32]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1d0      	bne.n	80015f4 <Draw_String+0x24>
	}
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bdb0      	pop	{r4, r5, r7, pc}

0800165c <main>:
extern float temp_result;

uint8_t status_dma_tx=1;

int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	Init_Clock();
 8001660:	f7ff fc30 	bl	8000ec4 <Init_Clock>
	I2C2_Init();
 8001664:	f7ff fe84 	bl	8001370 <I2C2_Init>
	GPIOA_Button_init();
 8001668:	f7ff fabe 	bl	8000be8 <GPIOA_Button_init>
	TFT_init();
 800166c:	f000 fbd8 	bl	8001e20 <TFT_init>

	while (1)
	{
		ds18b20_RealTemp();
 8001670:	f7ff fe40 	bl	80012f4 <ds18b20_RealTemp>
		getTemp_mlx90614(0x5A,  MLX90614_TA);
 8001674:	2106      	movs	r1, #6
 8001676:	205a      	movs	r0, #90	; 0x5a
 8001678:	f000 f81a 	bl	80016b0 <getTemp_mlx90614>
		FloatToCharTemperature(temp_result, 66, 20);
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <main+0x50>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	2114      	movs	r1, #20
 8001684:	2042      	movs	r0, #66	; 0x42
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	f000 fab5 	bl	8001bf8 <FloatToCharTemperature>
		getTemp_mlx90614(0x5A,  MLX90614_TOBJ_1);
 800168e:	2107      	movs	r1, #7
 8001690:	205a      	movs	r0, #90	; 0x5a
 8001692:	f000 f80d 	bl	80016b0 <getTemp_mlx90614>
		FloatToCharTemperature(temp_result, 90, 40);
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <main+0x50>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	2128      	movs	r1, #40	; 0x28
 800169e:	205a      	movs	r0, #90	; 0x5a
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	f000 faa8 	bl	8001bf8 <FloatToCharTemperature>
		ds18b20_RealTemp();
 80016a8:	e7e2      	b.n	8001670 <main+0x14>
 80016aa:	bf00      	nop
 80016ac:	20000040 	.word	0x20000040

080016b0 <getTemp_mlx90614>:
  ram_address the RAM address to read ( see constants in .h file ) :
 	MLX90614_TA - 		sensor crystal temperature
  	MLX90614_TOBJ_1 - 	temperature of the first IR sensor
*/

double getTemp_mlx90614(uint16_t address, uint8_t ram_address){
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	460a      	mov	r2, r1
 80016ba:	80fb      	strh	r3, [r7, #6]
 80016bc:	4613      	mov	r3, r2
 80016be:	717b      	strb	r3, [r7, #5]

	 address = address<<1; 						// shift one to the left (so the sensor accepts the address plus the first write/read bit)
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	80fb      	strh	r3, [r7, #6]
	 I2C2->CR1 |= I2C_CR1_START;
 80016c6:	4b6e      	ldr	r3, [pc, #440]	; (8001880 <getTemp_mlx90614+0x1d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a6d      	ldr	r2, [pc, #436]	; (8001880 <getTemp_mlx90614+0x1d0>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]
	 while (!(I2C2->SR1 & I2C_SR1_SB)){}
 80016d2:	bf00      	nop
 80016d4:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <getTemp_mlx90614+0x1d0>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f9      	beq.n	80016d4 <getTemp_mlx90614+0x24>

	 (void) I2C2->SR1;
 80016e0:	4b67      	ldr	r3, [pc, #412]	; (8001880 <getTemp_mlx90614+0x1d0>)
 80016e2:	695b      	ldr	r3, [r3, #20]

	 I2C2->DR = address | MLX90614_WRITE; 		// recording mode, MLX90614 address transmission
 80016e4:	4a66      	ldr	r2, [pc, #408]	; (8001880 <getTemp_mlx90614+0x1d0>)
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	6113      	str	r3, [r2, #16]
	 while (!(I2C2->SR1 & I2C_SR1_ADDR)){}		// we are waiting for the address to be sent
 80016ea:	bf00      	nop
 80016ec:	4b64      	ldr	r3, [pc, #400]	; (8001880 <getTemp_mlx90614+0x1d0>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f9      	beq.n	80016ec <getTemp_mlx90614+0x3c>

	 (void) I2C2->SR1;
 80016f8:	4b61      	ldr	r3, [pc, #388]	; (8001880 <getTemp_mlx90614+0x1d0>)
 80016fa:	695b      	ldr	r3, [r3, #20]
	 (void) I2C2->SR2;
 80016fc:	4b60      	ldr	r3, [pc, #384]	; (8001880 <getTemp_mlx90614+0x1d0>)
 80016fe:	699b      	ldr	r3, [r3, #24]

	 I2C2->DR= ram_address;						// transmitting the RAM address of the MLX90614 sensor
 8001700:	4a5f      	ldr	r2, [pc, #380]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001702:	797b      	ldrb	r3, [r7, #5]
 8001704:	6113      	str	r3, [r2, #16]
	 while (!(I2C2->SR1 & I2C_SR1_TXE)){}
 8001706:	bf00      	nop
 8001708:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <getTemp_mlx90614+0x1d0>)
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f9      	beq.n	8001708 <getTemp_mlx90614+0x58>

	 I2C2->CR1 |= I2C_CR1_START;				// restart
 8001714:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a59      	ldr	r2, [pc, #356]	; (8001880 <getTemp_mlx90614+0x1d0>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	6013      	str	r3, [r2, #0]
	 while (!(I2C2->SR1 & I2C_SR1_SB)){}
 8001720:	bf00      	nop
 8001722:	4b57      	ldr	r3, [pc, #348]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f9      	beq.n	8001722 <getTemp_mlx90614+0x72>

	 (void) I2C2->SR1;
 800172e:	4b54      	ldr	r3, [pc, #336]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001730:	695b      	ldr	r3, [r3, #20]

	 I2C2->DR = address | MLX90614_READ;		// accessing the sensor for reading
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b51      	ldr	r3, [pc, #324]	; (8001880 <getTemp_mlx90614+0x1d0>)
 800173c:	611a      	str	r2, [r3, #16]
	 while (!(I2C2->SR1 & I2C_SR1_ADDR)){}
 800173e:	bf00      	nop
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f9      	beq.n	8001740 <getTemp_mlx90614+0x90>

	 (void) I2C2->SR1;
 800174c:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <getTemp_mlx90614+0x1d0>)
 800174e:	695b      	ldr	r3, [r3, #20]
	 (void) I2C2->SR2;
 8001750:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001752:	699b      	ldr	r3, [r3, #24]

	 while(!(I2C2->SR1 & I2C_SR1_RXNE)){}
 8001754:	bf00      	nop
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f9      	beq.n	8001756 <getTemp_mlx90614+0xa6>

	 temp_lsb = I2C2->DR;						// reading the lowest byte
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b46      	ldr	r3, [pc, #280]	; (8001884 <getTemp_mlx90614+0x1d4>)
 800176a:	701a      	strb	r2, [r3, #0]

	 while(!(I2C2->SR1 & I2C_SR1_RXNE)){}
 800176c:	bf00      	nop
 800176e:	4b44      	ldr	r3, [pc, #272]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f9      	beq.n	800176e <getTemp_mlx90614+0xbe>

	 temp = I2C2->DR;							// reading the highest byte
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <getTemp_mlx90614+0x1d0>)
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b41      	ldr	r3, [pc, #260]	; (8001888 <getTemp_mlx90614+0x1d8>)
 8001782:	801a      	strh	r2, [r3, #0]

	 I2C2->CR1 |= I2C_CR1_STOP;
 8001784:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <getTemp_mlx90614+0x1d0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a3d      	ldr	r2, [pc, #244]	; (8001880 <getTemp_mlx90614+0x1d0>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]

	 temp = (temp & 0x007F) << 8;				//remove the error bit, shift it to the highest byte
 8001790:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <getTemp_mlx90614+0x1d8>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b29b      	uxth	r3, r3
 8001798:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <getTemp_mlx90614+0x1d8>)
 80017a0:	801a      	strh	r2, [r3, #0]
	 temp |= temp_lsb;
 80017a2:	4b38      	ldr	r3, [pc, #224]	; (8001884 <getTemp_mlx90614+0x1d4>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b37      	ldr	r3, [pc, #220]	; (8001888 <getTemp_mlx90614+0x1d8>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b35      	ldr	r3, [pc, #212]	; (8001888 <getTemp_mlx90614+0x1d8>)
 80017b2:	801a      	strh	r2, [r3, #0]
	 temp_float = (float) temp; 				// bring it to the float format
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <getTemp_mlx90614+0x1d8>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <getTemp_mlx90614+0x1dc>)
 80017c2:	edc3 7a00 	vstr	s15, [r3]
	 temp_result =  ((temp_float * 0.02)- 0.01 );			// multiply by the measurement resolution
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <getTemp_mlx90614+0x1dc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fe70 	bl	80004b0 <__aeabi_f2d>
 80017d0:	a325      	add	r3, pc, #148	; (adr r3, 8001868 <getTemp_mlx90614+0x1b8>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe fec3 	bl	8000560 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	a323      	add	r3, pc, #140	; (adr r3, 8001870 <getTemp_mlx90614+0x1c0>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe fd02 	bl	80001f0 <__aeabi_dsub>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f94e 	bl	8000a94 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a25      	ldr	r2, [pc, #148]	; (8001890 <getTemp_mlx90614+0x1e0>)
 80017fc:	6013      	str	r3, [r2, #0]
	 temp_result =  (temp_result - 273.15)/emissivity; 		// reduce it to degrees Celsius and divide it by the radiation coefficient of the material
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <getTemp_mlx90614+0x1e0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe54 	bl	80004b0 <__aeabi_f2d>
 8001808:	a31b      	add	r3, pc, #108	; (adr r3, 8001878 <getTemp_mlx90614+0x1c8>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fcef 	bl	80001f0 <__aeabi_dsub>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4614      	mov	r4, r2
 8001818:	461d      	mov	r5, r3
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <getTemp_mlx90614+0x1e4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe46 	bl	80004b0 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7fe ffc2 	bl	80007b4 <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f92c 	bl	8000a94 <__aeabi_d2f>
 800183c:	4603      	mov	r3, r0
 800183e:	4a14      	ldr	r2, [pc, #80]	; (8001890 <getTemp_mlx90614+0x1e0>)
 8001840:	6013      	str	r3, [r2, #0]

	 return temp_result;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <getTemp_mlx90614+0x1e0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe32 	bl	80004b0 <__aeabi_f2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	ec43 2b17 	vmov	d7, r2, r3
}
 8001854:	eeb0 0a47 	vmov.f32	s0, s14
 8001858:	eef0 0a67 	vmov.f32	s1, s15
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bdb0      	pop	{r4, r5, r7, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	47ae147b 	.word	0x47ae147b
 800186c:	3f947ae1 	.word	0x3f947ae1
 8001870:	47ae147b 	.word	0x47ae147b
 8001874:	3f847ae1 	.word	0x3f847ae1
 8001878:	66666666 	.word	0x66666666
 800187c:	40711266 	.word	0x40711266
 8001880:	40005800 	.word	0x40005800
 8001884:	2000003a 	.word	0x2000003a
 8001888:	20000038 	.word	0x20000038
 800188c:	2000003c 	.word	0x2000003c
 8001890:	20000040 	.word	0x20000040
 8001894:	20000000 	.word	0x20000000

08001898 <__NVIC_EnableIRQ>:
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <GPIOA_init_spi_TFT>:
#include "spi_dma.h"

uint8_t spi_buffer_tx[BUFFER_SPI_SIZE];
uint8_t spi_buffer_rx[BUFFER_SPI_SIZE];

void GPIOA_init_spi_TFT(){
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	 * PA7 - MOSI
	 * PA5 - SCK
	 * 3.3V - LED
	 * 5V - VCC
	 * **/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <GPIOA_init_spi_TFT+0x50>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a11      	ldr	r2, [pc, #68]	; (8001978 <GPIOA_init_spi_TFT+0x50>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER6_1| GPIO_MODER_MODER7_1;
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <GPIOA_init_spi_TFT+0x54>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <GPIOA_init_spi_TFT+0x54>)
 800193e:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8001942:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 0x555 << 20;
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <GPIOA_init_spi_TFT+0x54>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4a0c      	ldr	r2, [pc, #48]	; (800197c <GPIOA_init_spi_TFT+0x54>)
 800194a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800194e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001952:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= GPIO_MODER_MODER4_0|GPIO_MODER_MODER3_0|GPIO_MODER_MODER2_0;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <GPIOA_init_spi_TFT+0x54>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a08      	ldr	r2, [pc, #32]	; (800197c <GPIOA_init_spi_TFT+0x54>)
 800195a:	f443 73a8 	orr.w	r3, r3, #336	; 0x150
 800195e:	6013      	str	r3, [r2, #0]
	SET_CS();
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <GPIOA_init_spi_TFT+0x54>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a05      	ldr	r2, [pc, #20]	; (800197c <GPIOA_init_spi_TFT+0x54>)
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	6193      	str	r3, [r2, #24]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000

08001980 <DMA2_Stream3_IRQHandler>:


void DMA2_Stream3_IRQHandler(){
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <DMA2_Stream3_IRQHandler+0x38>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d011      	beq.n	80019b4 <DMA2_Stream3_IRQHandler+0x34>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <DMA2_Stream3_IRQHandler+0x38>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <DMA2_Stream3_IRQHandler+0x38>)
 8001996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800199a:	6093      	str	r3, [r2, #8]
		status_dma_tx = 1;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <DMA2_Stream3_IRQHandler+0x3c>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
		Micro_tick_delay(1);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 fac6 	bl	8001f34 <Micro_tick_delay>
		SET_CS();
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <DMA2_Stream3_IRQHandler+0x40>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <DMA2_Stream3_IRQHandler+0x40>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6193      	str	r3, [r2, #24]
	}
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40026400 	.word	0x40026400
 80019bc:	20000004 	.word	0x20000004
 80019c0:	40020000 	.word	0x40020000

080019c4 <dma_tx_init>:

void dma_tx_init(){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <dma_tx_init+0x6c>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <dma_tx_init+0x6c>)
 80019ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d2:	6313      	str	r3, [r2, #48]	; 0x30
	DMA2_Stream3->CR |= DMA_SxCR_DIR_0; // Memory-to-peripheral mode
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <dma_tx_init+0x70>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a16      	ldr	r2, [pc, #88]	; (8001a34 <dma_tx_init+0x70>)
 80019da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019de:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->M0AR = (uint32_t)(&spi_buffer_tx[0]);
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <dma_tx_init+0x70>)
 80019e2:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <dma_tx_init+0x74>)
 80019e4:	60da      	str	r2, [r3, #12]
	DMA2_Stream3->PAR = (uint32_t)(&(SPI1->DR));
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <dma_tx_init+0x70>)
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <dma_tx_init+0x78>)
 80019ea:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->CR |= 0x3 << DMA_SxCR_CHSEL_Pos; // Channel 3 selected
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <dma_tx_init+0x70>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <dma_tx_init+0x70>)
 80019f2:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80019f6:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC; // Memory increment mode
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <dma_tx_init+0x70>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <dma_tx_init+0x70>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE; // Transfer complete interrupt enable
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <dma_tx_init+0x70>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <dma_tx_init+0x70>)
 8001a0a:	f043 0310 	orr.w	r3, r3, #16
 8001a0e:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1; //Priority level high
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <dma_tx_init+0x70>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <dma_tx_init+0x70>)
 8001a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1a:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(DMA2_Stream3_IRQn, 3);
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	203b      	movs	r0, #59	; 0x3b
 8001a20:	f7ff ff58 	bl	80018d4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a24:	203b      	movs	r0, #59	; 0x3b
 8001a26:	f7ff ff37 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40026458 	.word	0x40026458
 8001a38:	20000044 	.word	0x20000044
 8001a3c:	4001300c 	.word	0x4001300c

08001a40 <spi1_master_init>:


void spi1_master_init() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	GPIOA_init_spi_TFT();
 8001a44:	f7ff ff70 	bl	8001928 <GPIOA_init_spi_TFT>
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <spi1_master_init+0x88>)
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <spi1_master_init+0x88>)
 8001a4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a52:	6453      	str	r3, [r2, #68]	; 0x44
	SPI1->CR1 &= ~SPI_CR1_LSBFIRST; // MSB transmits first
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <spi1_master_init+0x8c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <spi1_master_init+0x8c>)
 8001a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a5e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~SPI_CR1_CPOL; // SPI1 mode: 0
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <spi1_master_init+0x8c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <spi1_master_init+0x8c>)
 8001a66:	f023 0302 	bic.w	r3, r3, #2
 8001a6a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~SPI_CR1_CPHA; //
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <spi1_master_init+0x8c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a16      	ldr	r2, [pc, #88]	; (8001acc <spi1_master_init+0x8c>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;	// Master mode
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <spi1_master_init+0x8c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <spi1_master_init+0x8c>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSM; // Software NSS control
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <spi1_master_init+0x8c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a10      	ldr	r2, [pc, #64]	; (8001acc <spi1_master_init+0x8c>)
 8001a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSI; // NSS in high level by default
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <spi1_master_init+0x8c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <spi1_master_init+0x8c>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9a:	6013      	str	r3, [r2, #0]

	SPI1->CR1 &= ~SPI_CR1_DFF; // 8 bit format
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <spi1_master_init+0x8c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <spi1_master_init+0x8c>)
 8001aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aa6:	6013      	str	r3, [r2, #0]

	dma_tx_init();
 8001aa8:	f7ff ff8c 	bl	80019c4 <dma_tx_init>
	SPI1->CR2 |= SPI_CR2_TXDMAEN;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <spi1_master_init+0x8c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <spi1_master_init+0x8c>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	6053      	str	r3, [r2, #4]

	SPI1->CR1 |= SPI_CR1_SPE;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <spi1_master_init+0x8c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a03      	ldr	r2, [pc, #12]	; (8001acc <spi1_master_init+0x8c>)
 8001abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40013000 	.word	0x40013000

08001ad0 <spi1_SendDataDMA_1Byte>:

void spi1_SendDataDMA_1Byte(uint8_t* data, uint16_t count_byte) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
	while((SPI1->SR & SPI_SR_TXE) != SPI_SR_TXE);
 8001adc:	bf00      	nop
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <spi1_SendDataDMA_1Byte+0x7c>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d1f9      	bne.n	8001ade <spi1_SendDataDMA_1Byte+0xe>
	status_dma_tx = 0;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <spi1_SendDataDMA_1Byte+0x80>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < count_byte; i++) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e00b      	b.n	8001b0e <spi1_SendDataDMA_1Byte+0x3e>
		spi_buffer_tx[i] = data[i];
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	7819      	ldrb	r1, [r3, #0]
 8001afe:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <spi1_SendDataDMA_1Byte+0x84>)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	460a      	mov	r2, r1
 8001b06:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < count_byte; i++) {
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dbef      	blt.n	8001af6 <spi1_SendDataDMA_1Byte+0x26>
	}

	DMA2_Stream3->CR &= ~DMA_SxCR_EN;
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <spi1_SendDataDMA_1Byte+0x88>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <spi1_SendDataDMA_1Byte+0x88>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = count_byte;
 8001b22:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <spi1_SendDataDMA_1Byte+0x88>)
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	6053      	str	r3, [r2, #4]
	RESET_CS();
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <spi1_SendDataDMA_1Byte+0x8c>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <spi1_SendDataDMA_1Byte+0x8c>)
 8001b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b32:	6193      	str	r3, [r2, #24]
	Start_DMA_Send_Data();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <spi1_SendDataDMA_1Byte+0x88>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <spi1_SendDataDMA_1Byte+0x88>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40013000 	.word	0x40013000
 8001b50:	20000004 	.word	0x20000004
 8001b54:	20000044 	.word	0x20000044
 8001b58:	40026458 	.word	0x40026458
 8001b5c:	40020000 	.word	0x40020000

08001b60 <FloatToCharEmissivity>:


extern float emissivity;


void FloatToCharEmissivity(float n){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	ed87 0a01 	vstr	s0, [r7, #4]
	int tmp;
	tmp = (int)(n*100);
 8001b6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b6e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001bf0 <FloatToCharEmissivity+0x90>
 8001b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7a:	ee17 3a90 	vmov	r3, s15
 8001b7e:	60fb      	str	r3, [r7, #12]
	char a[3];
	a[0] = (tmp/10)%10 + 48;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <FloatToCharEmissivity+0x94>)
 8001b84:	fb82 1203 	smull	r1, r2, r2, r3
 8001b88:	1092      	asrs	r2, r2, #2
 8001b8a:	17db      	asrs	r3, r3, #31
 8001b8c:	1ad2      	subs	r2, r2, r3
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <FloatToCharEmissivity+0x94>)
 8001b90:	fb83 1302 	smull	r1, r3, r3, r2
 8001b94:	1099      	asrs	r1, r3, #2
 8001b96:	17d3      	asrs	r3, r2, #31
 8001b98:	1ac9      	subs	r1, r1, r3
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	1ad1      	subs	r1, r2, r3
 8001ba4:	b2cb      	uxtb	r3, r1
 8001ba6:	3330      	adds	r3, #48	; 0x30
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	723b      	strb	r3, [r7, #8]
	a[1] = tmp%10 + 48;
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <FloatToCharEmissivity+0x94>)
 8001bb0:	fb83 1302 	smull	r1, r3, r3, r2
 8001bb4:	1099      	asrs	r1, r3, #2
 8001bb6:	17d3      	asrs	r3, r2, #31
 8001bb8:	1ac9      	subs	r1, r1, r3
 8001bba:	460b      	mov	r3, r1
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	1ad1      	subs	r1, r2, r3
 8001bc4:	b2cb      	uxtb	r3, r1
 8001bc6:	3330      	adds	r3, #48	; 0x30
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	727b      	strb	r3, [r7, #9]
	a[2] = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	72bb      	strb	r3, [r7, #10]
	Draw_String(74, 60, WHITE, BLACK, &a[0], 2);
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be0:	213c      	movs	r1, #60	; 0x3c
 8001be2:	204a      	movs	r0, #74	; 0x4a
 8001be4:	f7ff fcf4 	bl	80015d0 <Draw_String>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	42c80000 	.word	0x42c80000
 8001bf4:	66666667 	.word	0x66666667

08001bf8 <FloatToCharTemperature>:
*
* Input data:
* src is a variable that needs to be converted to a char array
* x and y are the coordinates of the upper left point of the symbol rendering
 */
void FloatToCharTemperature(float src, uint16_t x, uint16_t y){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	803b      	strh	r3, [r7, #0]
	int tmp;
	if (src<0){
 8001c0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d571      	bpl.n	8001cfe <FloatToCharTemperature+0x106>
		tmp = (int)(-(src)*100);
 8001c1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c1e:	eef1 7a67 	vneg.f32	s15, s15
 8001c22:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001e0c <FloatToCharTemperature+0x214>
 8001c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2e:	ee17 3a90 	vmov	r3, s15
 8001c32:	61fb      	str	r3, [r7, #28]
		char a[7];
		a[0] = '-';
 8001c34:	232d      	movs	r3, #45	; 0x2d
 8001c36:	753b      	strb	r3, [r7, #20]
		a[1] = (tmp/1000)%10 + 48;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <FloatToCharTemperature+0x218>)
 8001c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c40:	1192      	asrs	r2, r2, #6
 8001c42:	17db      	asrs	r3, r3, #31
 8001c44:	1ad2      	subs	r2, r2, r3
 8001c46:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001c48:	fb83 1302 	smull	r1, r3, r3, r2
 8001c4c:	1099      	asrs	r1, r3, #2
 8001c4e:	17d3      	asrs	r3, r2, #31
 8001c50:	1ac9      	subs	r1, r1, r3
 8001c52:	460b      	mov	r3, r1
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	1ad1      	subs	r1, r2, r3
 8001c5c:	b2cb      	uxtb	r3, r1
 8001c5e:	3330      	adds	r3, #48	; 0x30
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	757b      	strb	r3, [r7, #21]
		a[2] = (tmp/100)%10 + 48;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4a6c      	ldr	r2, [pc, #432]	; (8001e18 <FloatToCharTemperature+0x220>)
 8001c68:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6c:	1152      	asrs	r2, r2, #5
 8001c6e:	17db      	asrs	r3, r3, #31
 8001c70:	1ad2      	subs	r2, r2, r3
 8001c72:	4b68      	ldr	r3, [pc, #416]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001c74:	fb83 1302 	smull	r1, r3, r3, r2
 8001c78:	1099      	asrs	r1, r3, #2
 8001c7a:	17d3      	asrs	r3, r2, #31
 8001c7c:	1ac9      	subs	r1, r1, r3
 8001c7e:	460b      	mov	r3, r1
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	1ad1      	subs	r1, r2, r3
 8001c88:	b2cb      	uxtb	r3, r1
 8001c8a:	3330      	adds	r3, #48	; 0x30
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	75bb      	strb	r3, [r7, #22]
		a[3] = '.';
 8001c90:	232e      	movs	r3, #46	; 0x2e
 8001c92:	75fb      	strb	r3, [r7, #23]
		a[4] = (tmp/10)%10+48;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	4a5f      	ldr	r2, [pc, #380]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001c98:	fb82 1203 	smull	r1, r2, r2, r3
 8001c9c:	1092      	asrs	r2, r2, #2
 8001c9e:	17db      	asrs	r3, r3, #31
 8001ca0:	1ad2      	subs	r2, r2, r3
 8001ca2:	4b5c      	ldr	r3, [pc, #368]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001ca4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca8:	1099      	asrs	r1, r3, #2
 8001caa:	17d3      	asrs	r3, r2, #31
 8001cac:	1ac9      	subs	r1, r1, r3
 8001cae:	460b      	mov	r3, r1
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	1ad1      	subs	r1, r2, r3
 8001cb8:	b2cb      	uxtb	r3, r1
 8001cba:	3330      	adds	r3, #48	; 0x30
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	763b      	strb	r3, [r7, #24]
		a[5] = tmp%10+48;
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	4b54      	ldr	r3, [pc, #336]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001cc4:	fb83 1302 	smull	r1, r3, r3, r2
 8001cc8:	1099      	asrs	r1, r3, #2
 8001cca:	17d3      	asrs	r3, r2, #31
 8001ccc:	1ac9      	subs	r1, r1, r3
 8001cce:	460b      	mov	r3, r1
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	1ad1      	subs	r1, r2, r3
 8001cd8:	b2cb      	uxtb	r3, r1
 8001cda:	3330      	adds	r3, #48	; 0x30
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	767b      	strb	r3, [r7, #25]
		a[6] = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	76bb      	strb	r3, [r7, #26]
		Draw_String(x, y, WHITE, BLACK, &a[0], 2);
 8001ce4:	8878      	ldrh	r0, [r7, #2]
 8001ce6:	8839      	ldrh	r1, [r7, #0]
 8001ce8:	2302      	movs	r3, #2
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf8:	f7ff fc6a 	bl	80015d0 <Draw_String>
		a[4] = (tmp/10)%10+48;
		a[5] = tmp%10+48;
		a[6] = 0;
		Draw_String(x, y, WHITE, BLACK, &a[0], 2);
	}
}
 8001cfc:	e082      	b.n	8001e04 <FloatToCharTemperature+0x20c>
		tmp = (int)(src*100);
 8001cfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d02:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001e0c <FloatToCharTemperature+0x214>
 8001d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d0e:	ee17 3a90 	vmov	r3, s15
 8001d12:	61fb      	str	r3, [r7, #28]
		a[0] = (tmp/10000)%10 + 48;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	4a41      	ldr	r2, [pc, #260]	; (8001e1c <FloatToCharTemperature+0x224>)
 8001d18:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1c:	1312      	asrs	r2, r2, #12
 8001d1e:	17db      	asrs	r3, r3, #31
 8001d20:	1ad2      	subs	r2, r2, r3
 8001d22:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001d24:	fb83 1302 	smull	r1, r3, r3, r2
 8001d28:	1099      	asrs	r1, r3, #2
 8001d2a:	17d3      	asrs	r3, r2, #31
 8001d2c:	1ac9      	subs	r1, r1, r3
 8001d2e:	460b      	mov	r3, r1
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	1ad1      	subs	r1, r2, r3
 8001d38:	b2cb      	uxtb	r3, r1
 8001d3a:	3330      	adds	r3, #48	; 0x30
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	733b      	strb	r3, [r7, #12]
		a[1] = (tmp/1000)%10 + 48;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <FloatToCharTemperature+0x218>)
 8001d44:	fb82 1203 	smull	r1, r2, r2, r3
 8001d48:	1192      	asrs	r2, r2, #6
 8001d4a:	17db      	asrs	r3, r3, #31
 8001d4c:	1ad2      	subs	r2, r2, r3
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001d50:	fb83 1302 	smull	r1, r3, r3, r2
 8001d54:	1099      	asrs	r1, r3, #2
 8001d56:	17d3      	asrs	r3, r2, #31
 8001d58:	1ac9      	subs	r1, r1, r3
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	1ad1      	subs	r1, r2, r3
 8001d64:	b2cb      	uxtb	r3, r1
 8001d66:	3330      	adds	r3, #48	; 0x30
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	737b      	strb	r3, [r7, #13]
		a[2] = (tmp/100)%10 + 48;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	4a2a      	ldr	r2, [pc, #168]	; (8001e18 <FloatToCharTemperature+0x220>)
 8001d70:	fb82 1203 	smull	r1, r2, r2, r3
 8001d74:	1152      	asrs	r2, r2, #5
 8001d76:	17db      	asrs	r3, r3, #31
 8001d78:	1ad2      	subs	r2, r2, r3
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001d7c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d80:	1099      	asrs	r1, r3, #2
 8001d82:	17d3      	asrs	r3, r2, #31
 8001d84:	1ac9      	subs	r1, r1, r3
 8001d86:	460b      	mov	r3, r1
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	1ad1      	subs	r1, r2, r3
 8001d90:	b2cb      	uxtb	r3, r1
 8001d92:	3330      	adds	r3, #48	; 0x30
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	73bb      	strb	r3, [r7, #14]
		a[3] = '.';
 8001d98:	232e      	movs	r3, #46	; 0x2e
 8001d9a:	73fb      	strb	r3, [r7, #15]
		a[4] = (tmp/10)%10+48;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001da0:	fb82 1203 	smull	r1, r2, r2, r3
 8001da4:	1092      	asrs	r2, r2, #2
 8001da6:	17db      	asrs	r3, r3, #31
 8001da8:	1ad2      	subs	r2, r2, r3
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001dac:	fb83 1302 	smull	r1, r3, r3, r2
 8001db0:	1099      	asrs	r1, r3, #2
 8001db2:	17d3      	asrs	r3, r2, #31
 8001db4:	1ac9      	subs	r1, r1, r3
 8001db6:	460b      	mov	r3, r1
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	1ad1      	subs	r1, r2, r3
 8001dc0:	b2cb      	uxtb	r3, r1
 8001dc2:	3330      	adds	r3, #48	; 0x30
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	743b      	strb	r3, [r7, #16]
		a[5] = tmp%10+48;
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <FloatToCharTemperature+0x21c>)
 8001dcc:	fb83 1302 	smull	r1, r3, r3, r2
 8001dd0:	1099      	asrs	r1, r3, #2
 8001dd2:	17d3      	asrs	r3, r2, #31
 8001dd4:	1ac9      	subs	r1, r1, r3
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	1ad1      	subs	r1, r2, r3
 8001de0:	b2cb      	uxtb	r3, r1
 8001de2:	3330      	adds	r3, #48	; 0x30
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	747b      	strb	r3, [r7, #17]
		a[6] = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	74bb      	strb	r3, [r7, #18]
		Draw_String(x, y, WHITE, BLACK, &a[0], 2);
 8001dec:	8878      	ldrh	r0, [r7, #2]
 8001dee:	8839      	ldrh	r1, [r7, #0]
 8001df0:	2302      	movs	r3, #2
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e00:	f7ff fbe6 	bl	80015d0 <Draw_String>
}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	42c80000 	.word	0x42c80000
 8001e10:	10624dd3 	.word	0x10624dd3
 8001e14:	66666667 	.word	0x66666667
 8001e18:	51eb851f 	.word	0x51eb851f
 8001e1c:	68db8bad 	.word	0x68db8bad

08001e20 <TFT_init>:

void TFT_init(){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af02      	add	r7, sp, #8
	spi1_master_init();
 8001e26:	f7ff fe0b 	bl	8001a40 <spi1_master_init>
	LED_on();
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <TFT_init+0xfc>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	; (8001f1c <TFT_init+0xfc>)
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	6193      	str	r3, [r2, #24]

	RESET_ACTIVE();
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <TFT_init+0xfc>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	4a38      	ldr	r2, [pc, #224]	; (8001f1c <TFT_init+0xfc>)
 8001e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e40:	6193      	str	r3, [r2, #24]
	Micro_tick_delay(1);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f000 f876 	bl	8001f34 <Micro_tick_delay>

	RESET_IDLE();
 8001e48:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <TFT_init+0xfc>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	4a33      	ldr	r2, [pc, #204]	; (8001f1c <TFT_init+0xfc>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6193      	str	r3, [r2, #24]
	Micro_tick_delay(40);
 8001e54:	2028      	movs	r0, #40	; 0x28
 8001e56:	f000 f86d 	bl	8001f34 <Micro_tick_delay>

	tft_write_cmd(0x01,1,1); // software reset
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f000 f880 	bl	8001f64 <tft_write_cmd>
// necessary to wait 5msec before sending new command
// it works without delay at all

	tft_display_normal_mode();
 8001e64:	f000 f8d8 	bl	8002018 <tft_display_normal_mode>
// necessary to wait 5msec before sending new command
// it works without delay at all
	tft_pixel_format();
 8001e68:	f000 f8ec 	bl	8002044 <tft_pixel_format>
//	not necessary to wait

	tft_sleep_out();
 8001e6c:	f000 f8aa 	bl	8001fc4 <tft_sleep_out>
// necessary to wait 5msec before sending new command
// it works without delay at all
	tft_display_on();
 8001e70:	f000 f8c2 	bl	8001ff8 <tft_display_on>
//	not necessary to wait

	tft_color_ALL(BLACK);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f000 f979 	bl	800216c <tft_color_ALL>
	Draw_String(10, 20, WHITE, BLACK, "t", 2);
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <TFT_init+0x100>)
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e88:	2114      	movs	r1, #20
 8001e8a:	200a      	movs	r0, #10
 8001e8c:	f7ff fba0 	bl	80015d0 <Draw_String>
	Draw_String(26, 28, WHITE, BLACK, "air", 1);
 8001e90:	2301      	movs	r3, #1
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <TFT_init+0x104>)
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e9e:	211c      	movs	r1, #28
 8001ea0:	201a      	movs	r0, #26
 8001ea2:	f7ff fb95 	bl	80015d0 <Draw_String>
	Draw_String(50, 20, WHITE, BLACK, "=", 2);
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <TFT_init+0x108>)
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb4:	2114      	movs	r1, #20
 8001eb6:	2032      	movs	r0, #50	; 0x32
 8001eb8:	f7ff fb8a 	bl	80015d0 <Draw_String>
	Draw_String(10, 40, WHITE, BLACK, "t", 2);
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <TFT_init+0x100>)
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eca:	2128      	movs	r1, #40	; 0x28
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f7ff fb7f 	bl	80015d0 <Draw_String>
	Draw_String(26, 48, WHITE, BLACK, "object", 1);
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <TFT_init+0x10c>)
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2300      	movs	r3, #0
 8001edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee0:	2130      	movs	r1, #48	; 0x30
 8001ee2:	201a      	movs	r0, #26
 8001ee4:	f7ff fb74 	bl	80015d0 <Draw_String>
	Draw_String(74, 40, WHITE, BLACK, "=", 2);
 8001ee8:	2302      	movs	r3, #2
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <TFT_init+0x108>)
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef6:	2128      	movs	r1, #40	; 0x28
 8001ef8:	204a      	movs	r0, #74	; 0x4a
 8001efa:	f7ff fb69 	bl	80015d0 <Draw_String>
	Draw_String(10, 60, WHITE, BLACK, "E=0.99", 2);
 8001efe:	2302      	movs	r3, #2
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <TFT_init+0x110>)
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2300      	movs	r3, #0
 8001f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f0c:	213c      	movs	r1, #60	; 0x3c
 8001f0e:	200a      	movs	r0, #10
 8001f10:	f7ff fb5e 	bl	80015d0 <Draw_String>
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	08002388 	.word	0x08002388
 8001f24:	0800238c 	.word	0x0800238c
 8001f28:	08002390 	.word	0x08002390
 8001f2c:	08002394 	.word	0x08002394
 8001f30:	0800239c 	.word	0x0800239c

08001f34 <Micro_tick_delay>:


void Micro_tick_delay(uint32_t tick){
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	tick*=48;
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	607b      	str	r3, [r7, #4]
	while (tick--);
 8001f48:	bf00      	nop
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1fa      	bne.n	8001f4a <Micro_tick_delay+0x16>
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <tft_write_cmd>:

void TickDelay(uint32_t tick){
	while(tick--);
}

void tft_write_cmd(uint8_t cmd, uint8_t *data, uint8_t size) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71bb      	strb	r3, [r7, #6]
	if (size == 0) {
 8001f74:	79bb      	ldrb	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01d      	beq.n	8001fb6 <tft_write_cmd+0x52>
		return;
	}

	DC_COMMAND();
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <tft_write_cmd+0x5c>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <tft_write_cmd+0x5c>)
 8001f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f84:	6193      	str	r3, [r2, #24]
	spi1_SendDataDMA_1Byte(&cmd, 1);
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fda0 	bl	8001ad0 <spi1_SendDataDMA_1Byte>
	Micro_tick_delay(1);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f7ff ffcf 	bl	8001f34 <Micro_tick_delay>

	DC_DATA();
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <tft_write_cmd+0x5c>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <tft_write_cmd+0x5c>)
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6193      	str	r3, [r2, #24]
	spi1_SendDataDMA_1Byte(&data[0], size);
 8001fa2:	79bb      	ldrb	r3, [r7, #6]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6838      	ldr	r0, [r7, #0]
 8001faa:	f7ff fd91 	bl	8001ad0 <spi1_SendDataDMA_1Byte>
	Micro_tick_delay(8); // experimental value
 8001fae:	2008      	movs	r0, #8
 8001fb0:	f7ff ffc0 	bl	8001f34 <Micro_tick_delay>
 8001fb4:	e000      	b.n	8001fb8 <tft_write_cmd+0x54>
		return;
 8001fb6:	bf00      	nop
}
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40020000 	.word	0x40020000

08001fc4 <tft_sleep_out>:

void tft_sleep_out() {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
	DC_COMMAND();
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <tft_sleep_out+0x30>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <tft_sleep_out+0x30>)
 8001fd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fd4:	6193      	str	r3, [r2, #24]
	uint8_t data=Sleep_out;
 8001fd6:	2311      	movs	r3, #17
 8001fd8:	71fb      	strb	r3, [r7, #7]
	spi1_SendDataDMA_1Byte(&data, 1);
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	2101      	movs	r1, #1
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fd76 	bl	8001ad0 <spi1_SendDataDMA_1Byte>
	Micro_tick_delay(3100); // experimental value
 8001fe4:	f640 401c 	movw	r0, #3100	; 0xc1c
 8001fe8:	f7ff ffa4 	bl	8001f34 <Micro_tick_delay>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <tft_display_on>:

void tft_display_off() {
	tft_write_cmd(Display_OFF, 0, 0);
}

void tft_display_on() {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
	uint8_t data=ROTATION;
 8001ffe:	2348      	movs	r3, #72	; 0x48
 8002000:	71fb      	strb	r3, [r7, #7]
	tft_write_cmd(Display_ON, &data, 1);
 8002002:	1dfb      	adds	r3, r7, #7
 8002004:	2201      	movs	r2, #1
 8002006:	4619      	mov	r1, r3
 8002008:	2029      	movs	r0, #41	; 0x29
 800200a:	f7ff ffab 	bl	8001f64 <tft_write_cmd>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <tft_display_normal_mode>:

void tft_display_normal_mode() {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
	DC_COMMAND();
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <tft_display_normal_mode+0x28>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4a07      	ldr	r2, [pc, #28]	; (8002040 <tft_display_normal_mode+0x28>)
 8002024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002028:	6193      	str	r3, [r2, #24]
	uint8_t data=Normal_Display_mode;
 800202a:	2313      	movs	r3, #19
 800202c:	71fb      	strb	r3, [r7, #7]
	spi1_SendDataDMA_1Byte(&data, 1);
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fd4c 	bl	8001ad0 <spi1_SendDataDMA_1Byte>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40020000 	.word	0x40020000

08002044 <tft_pixel_format>:

void tft_pixel_format() {
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
	uint8_t data = Pixel_16_bits;
 800204a:	2355      	movs	r3, #85	; 0x55
 800204c:	71fb      	strb	r3, [r7, #7]
	tft_write_cmd(Pixel_Format_Set, &data, 1);
 800204e:	1dfb      	adds	r3, r7, #7
 8002050:	2201      	movs	r2, #1
 8002052:	4619      	mov	r1, r3
 8002054:	203a      	movs	r0, #58	; 0x3a
 8002056:	f7ff ff85 	bl	8001f64 <tft_write_cmd>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <tft_set_column>:

//column - y
void tft_set_column(uint16_t col_start, uint16_t col_end) {
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	460a      	mov	r2, r1
 800206c:	80fb      	strh	r3, [r7, #6]
 800206e:	4613      	mov	r3, r2
 8002070:	80bb      	strh	r3, [r7, #4]
	uint8_t data_column[4] = {	(uint8_t)((col_start >> 8) & 0xFF),
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	0a1b      	lsrs	r3, r3, #8
 8002076:	b29b      	uxth	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	733b      	strb	r3, [r7, #12]
								(uint8_t)(col_start & 0xFF),
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	b2db      	uxtb	r3, r3
	uint8_t data_column[4] = {	(uint8_t)((col_start >> 8) & 0xFF),
 8002080:	737b      	strb	r3, [r7, #13]
								(uint8_t)((col_end >> 8) & 0xFF),
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	b29b      	uxth	r3, r3
 8002088:	b2db      	uxtb	r3, r3
	uint8_t data_column[4] = {	(uint8_t)((col_start >> 8) & 0xFF),
 800208a:	73bb      	strb	r3, [r7, #14]
								(uint8_t)(col_end & 0xFF)};
 800208c:	88bb      	ldrh	r3, [r7, #4]
 800208e:	b2db      	uxtb	r3, r3
	uint8_t data_column[4] = {	(uint8_t)((col_start >> 8) & 0xFF),
 8002090:	73fb      	strb	r3, [r7, #15]

	tft_write_cmd(Column_Address_Set, &data_column[0], 4);
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	2204      	movs	r2, #4
 8002098:	4619      	mov	r1, r3
 800209a:	202a      	movs	r0, #42	; 0x2a
 800209c:	f7ff ff62 	bl	8001f64 <tft_write_cmd>
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <tft_set_row>:

//row - x
void tft_set_row(uint16_t row_start, uint16_t row_end) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	460a      	mov	r2, r1
 80020b2:	80fb      	strh	r3, [r7, #6]
 80020b4:	4613      	mov	r3, r2
 80020b6:	80bb      	strh	r3, [r7, #4]
	uint8_t data_row[4] = {	(uint8_t)(row_start >> 8),
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	733b      	strb	r3, [r7, #12]
							(uint8_t)(row_start & 0xFF),
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	b2db      	uxtb	r3, r3
	uint8_t data_row[4] = {	(uint8_t)(row_start >> 8),
 80020c6:	737b      	strb	r3, [r7, #13]
							(uint8_t)(row_end >> 8),
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
	uint8_t data_row[4] = {	(uint8_t)(row_start >> 8),
 80020d0:	73bb      	strb	r3, [r7, #14]
							(uint8_t)(row_end & 0xFF)};
 80020d2:	88bb      	ldrh	r3, [r7, #4]
 80020d4:	b2db      	uxtb	r3, r3
	uint8_t data_row[4] = {	(uint8_t)(row_start >> 8),
 80020d6:	73fb      	strb	r3, [r7, #15]
	tft_write_cmd(Page_Adress_Set, &data_row[0], 4);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	2204      	movs	r2, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	202b      	movs	r0, #43	; 0x2b
 80020e2:	f7ff ff3f 	bl	8001f64 <tft_write_cmd>
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <tft_ram_write>:

void tft_ram_write(uint8_t *data, uint8_t size) {
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
	tft_write_cmd(Memory_Write, &data[0], size);
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	461a      	mov	r2, r3
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	202c      	movs	r0, #44	; 0x2c
 8002102:	f7ff ff2f 	bl	8001f64 <tft_write_cmd>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <tft_set_region>:

void tft_set_region(uint16_t row_start, uint16_t row_end, uint16_t col_start, uint16_t col_end) { // selecting an area
 800210e:	b590      	push	{r4, r7, lr}
 8002110:	b085      	sub	sp, #20
 8002112:	af00      	add	r7, sp, #0
 8002114:	4604      	mov	r4, r0
 8002116:	4608      	mov	r0, r1
 8002118:	4611      	mov	r1, r2
 800211a:	461a      	mov	r2, r3
 800211c:	4623      	mov	r3, r4
 800211e:	80fb      	strh	r3, [r7, #6]
 8002120:	4603      	mov	r3, r0
 8002122:	80bb      	strh	r3, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	803b      	strh	r3, [r7, #0]
	uint8_t data = 0x0;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
	tft_write_cmd(Memory_Access_Control, &data, 1);
 8002130:	f107 030f 	add.w	r3, r7, #15
 8002134:	2201      	movs	r2, #1
 8002136:	4619      	mov	r1, r3
 8002138:	2036      	movs	r0, #54	; 0x36
 800213a:	f7ff ff13 	bl	8001f64 <tft_write_cmd>

	tft_set_column(col_start, col_end);
 800213e:	883a      	ldrh	r2, [r7, #0]
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff8c 	bl	8002062 <tft_set_column>
	tft_set_row(row_start, row_end);
 800214a:	88ba      	ldrh	r2, [r7, #4]
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ffa9 	bl	80020a8 <tft_set_row>
	tft_ram_write(&data, 1);
 8002156:	f107 030f 	add.w	r3, r7, #15
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ffc6 	bl	80020ee <tft_ram_write>
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
	...

0800216c <tft_color_ALL>:

void tft_color_ALL(uint16_t color) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
	tft_set_region(0,X_SIZE,0,Y_SIZE);
 8002176:	23f0      	movs	r3, #240	; 0xf0
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800217e:	2000      	movs	r0, #0
 8002180:	f7ff ffc5 	bl	800210e <tft_set_region>
	uint8_t color_array[4];
	color_array[0] = (uint8_t)((color >> 8) & 0xFF) ;
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	b29b      	uxth	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	723b      	strb	r3, [r7, #8]
	color_array[1] = (uint8_t)(color & 0xFF);
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	727b      	strb	r3, [r7, #9]
	DC_DATA();
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <tft_color_ALL+0x60>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a0c      	ldr	r2, [pc, #48]	; (80021cc <tft_color_ALL+0x60>)
 800219a:	f043 0308 	orr.w	r3, r3, #8
 800219e:	6193      	str	r3, [r2, #24]
	for (int i = 0; i<76800; i++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e008      	b.n	80021b8 <tft_color_ALL+0x4c>
	{
		spi1_SendDataDMA_1Byte(&color_array[0],2);
 80021a6:	f107 0308 	add.w	r3, r7, #8
 80021aa:	2102      	movs	r1, #2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc8f 	bl	8001ad0 <spi1_SendDataDMA_1Byte>
	for (int i = 0; i<76800; i++)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3301      	adds	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80021be:	dbf2      	blt.n	80021a6 <tft_color_ALL+0x3a>
	}
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40020000 	.word	0x40020000

080021d0 <tft_color_XY>:

void tft_color_XY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) {
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4604      	mov	r4, r0
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4623      	mov	r3, r4
 80021e0:	80fb      	strh	r3, [r7, #6]
 80021e2:	4603      	mov	r3, r0
 80021e4:	80bb      	strh	r3, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	807b      	strh	r3, [r7, #2]
 80021ea:	4613      	mov	r3, r2
 80021ec:	803b      	strh	r3, [r7, #0]
	if (x1>X_SIZE || y1>Y_SIZE || x2>X_SIZE || y2>Y_SIZE)
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80021f4:	d851      	bhi.n	800229a <tft_color_XY+0xca>
 80021f6:	88bb      	ldrh	r3, [r7, #4]
 80021f8:	2bf0      	cmp	r3, #240	; 0xf0
 80021fa:	d84e      	bhi.n	800229a <tft_color_XY+0xca>
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002202:	d84a      	bhi.n	800229a <tft_color_XY+0xca>
 8002204:	883b      	ldrh	r3, [r7, #0]
 8002206:	2bf0      	cmp	r3, #240	; 0xf0
 8002208:	d847      	bhi.n	800229a <tft_color_XY+0xca>
		return;
	if (x1>x2) swap(&x1,&x2);
 800220a:	88fa      	ldrh	r2, [r7, #6]
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	429a      	cmp	r2, r3
 8002210:	d905      	bls.n	800221e <tft_color_XY+0x4e>
 8002212:	1cba      	adds	r2, r7, #2
 8002214:	1dbb      	adds	r3, r7, #6
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f000 f845 	bl	80022a8 <swap>
	if (y1>y2) swap(&y1,&y2);
 800221e:	88ba      	ldrh	r2, [r7, #4]
 8002220:	883b      	ldrh	r3, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d905      	bls.n	8002232 <tft_color_XY+0x62>
 8002226:	463a      	mov	r2, r7
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f83b 	bl	80022a8 <swap>
	tft_set_region(x1,x2,y1,y2);
 8002232:	88f8      	ldrh	r0, [r7, #6]
 8002234:	8879      	ldrh	r1, [r7, #2]
 8002236:	88ba      	ldrh	r2, [r7, #4]
 8002238:	883b      	ldrh	r3, [r7, #0]
 800223a:	f7ff ff68 	bl	800210e <tft_set_region>
	int count_pixels = (x2-x1+1)*(y2-y1+1);
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	461a      	mov	r2, r3
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	3301      	adds	r3, #1
 8002248:	883a      	ldrh	r2, [r7, #0]
 800224a:	4611      	mov	r1, r2
 800224c:	88ba      	ldrh	r2, [r7, #4]
 800224e:	1a8a      	subs	r2, r1, r2
 8002250:	3201      	adds	r2, #1
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	613b      	str	r3, [r7, #16]
	uint8_t color_array[2];
	color_array[0] = (uint8_t)((color >> 8) & 0xFF) ;
 8002258:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	733b      	strb	r3, [r7, #12]
	color_array[1] = (uint8_t)(color & 0xFF);
 8002262:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002264:	b2db      	uxtb	r3, r3
 8002266:	737b      	strb	r3, [r7, #13]
	DC_DATA();
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <tft_color_XY+0xd4>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <tft_color_XY+0xd4>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6193      	str	r3, [r2, #24]
	for(uint32_t i = 0; i < count_pixels+1; i++){
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e008      	b.n	800228c <tft_color_XY+0xbc>
		spi1_SendDataDMA_1Byte(&color_array[0],2);
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	2102      	movs	r1, #2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fc25 	bl	8001ad0 <spi1_SendDataDMA_1Byte>
	for(uint32_t i = 0; i < count_pixels+1; i++){
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	3301      	adds	r3, #1
 8002290:	461a      	mov	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	4293      	cmp	r3, r2
 8002296:	d3f0      	bcc.n	800227a <tft_color_XY+0xaa>
 8002298:	e000      	b.n	800229c <tft_color_XY+0xcc>
		return;
 800229a:	bf00      	nop
	}
}
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40020000 	.word	0x40020000

080022a8 <swap>:

void swap(uint16_t *a, uint16_t *b) {
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	uint16_t t;
	t=*a;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	81fb      	strh	r3, [r7, #14]
	*a=*b;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	881a      	ldrh	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	801a      	strh	r2, [r3, #0]
	*b=t;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	89fa      	ldrh	r2, [r7, #14]
 80022c4:	801a      	strh	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <Reset_Handler>:
 80022d4:	480d      	ldr	r0, [pc, #52]	; (800230c <LoopForever+0x2>)
 80022d6:	4685      	mov	sp, r0
 80022d8:	f7fe fc2c 	bl	8000b34 <SystemInit>
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <LoopForever+0x6>)
 80022de:	490d      	ldr	r1, [pc, #52]	; (8002314 <LoopForever+0xa>)
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <LoopForever+0xe>)
 80022e2:	2300      	movs	r3, #0
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:
 80022e6:	58d4      	ldr	r4, [r2, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:
 80022ec:	18c4      	adds	r4, r0, r3
 80022ee:	428c      	cmp	r4, r1
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <LoopForever+0x12>)
 80022f4:	4c0a      	ldr	r4, [pc, #40]	; (8002320 <LoopForever+0x16>)
 80022f6:	2300      	movs	r3, #0
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:
 80022fe:	42a2      	cmp	r2, r4
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>
 8002302:	f000 f811 	bl	8002328 <__libc_init_array>
 8002306:	f7ff f9a9 	bl	800165c <main>

0800230a <LoopForever>:
 800230a:	e7fe      	b.n	800230a <LoopForever>
 800230c:	20020000 	.word	0x20020000
 8002310:	20000000 	.word	0x20000000
 8002314:	20000008 	.word	0x20000008
 8002318:	0800269c 	.word	0x0800269c
 800231c:	20000008 	.word	0x20000008
 8002320:	20000144 	.word	0x20000144

08002324 <ADC_IRQHandler>:
 8002324:	e7fe      	b.n	8002324 <ADC_IRQHandler>
	...

08002328 <__libc_init_array>:
 8002328:	b570      	push	{r4, r5, r6, lr}
 800232a:	4d0d      	ldr	r5, [pc, #52]	; (8002360 <__libc_init_array+0x38>)
 800232c:	4c0d      	ldr	r4, [pc, #52]	; (8002364 <__libc_init_array+0x3c>)
 800232e:	1b64      	subs	r4, r4, r5
 8002330:	10a4      	asrs	r4, r4, #2
 8002332:	2600      	movs	r6, #0
 8002334:	42a6      	cmp	r6, r4
 8002336:	d109      	bne.n	800234c <__libc_init_array+0x24>
 8002338:	4d0b      	ldr	r5, [pc, #44]	; (8002368 <__libc_init_array+0x40>)
 800233a:	4c0c      	ldr	r4, [pc, #48]	; (800236c <__libc_init_array+0x44>)
 800233c:	f000 f818 	bl	8002370 <_init>
 8002340:	1b64      	subs	r4, r4, r5
 8002342:	10a4      	asrs	r4, r4, #2
 8002344:	2600      	movs	r6, #0
 8002346:	42a6      	cmp	r6, r4
 8002348:	d105      	bne.n	8002356 <__libc_init_array+0x2e>
 800234a:	bd70      	pop	{r4, r5, r6, pc}
 800234c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002350:	4798      	blx	r3
 8002352:	3601      	adds	r6, #1
 8002354:	e7ee      	b.n	8002334 <__libc_init_array+0xc>
 8002356:	f855 3b04 	ldr.w	r3, [r5], #4
 800235a:	4798      	blx	r3
 800235c:	3601      	adds	r6, #1
 800235e:	e7f2      	b.n	8002346 <__libc_init_array+0x1e>
 8002360:	08002694 	.word	0x08002694
 8002364:	08002694 	.word	0x08002694
 8002368:	08002694 	.word	0x08002694
 800236c:	08002698 	.word	0x08002698

08002370 <_init>:
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	bf00      	nop
 8002374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002376:	bc08      	pop	{r3}
 8002378:	469e      	mov	lr, r3
 800237a:	4770      	bx	lr

0800237c <_fini>:
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237e:	bf00      	nop
 8002380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002382:	bc08      	pop	{r3}
 8002384:	469e      	mov	lr, r3
 8002386:	4770      	bx	lr
